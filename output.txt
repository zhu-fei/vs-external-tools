user settings 

"vs-external-tools.externalCommand1.args": ["--verbose --script", " $(ItemFileName)$(ItemExt)"],

    // Command
    "vs-external-tools.externalCommand1.command": "scheme.exe",
    // "vs-external-tools.externalCommand1.command": "C:/Users/secci/Desktop/ConsoleApplication1/x64/Debug/ConsoleApplication1.exe",
    // Initial directory
    "vs-external-tools.externalCommand1.cwd": "$(ItemDir)",



extension.js

'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
const vscode = require("vscode");
const process = require("child_process");
const macro = require("./macro");
// this method is called when your extension is activated
// your extension is activated the very first time the command is executed

 var _outputChannel = vscode.window.createOutputChannel("scheme");
 _outputChannel.show();
function activate(context) {
    
    // Use the console to output diagnostic information (console.log) and errors (console.error)
    // This line of code will only be executed once when your extension is activated
    console.log('Congratulations, your extension "vs-external-tools" is now active!');
    // The command has been defined in the package.json file
    // Now provide the implementation of the command with  registerCommand
    // The commandId parameter must match the command field in package.json
    let commands = vscode.extensions.getExtension('lihui.vs-external-tools').packageJSON.contributes.commands;
    for (let command of commands) {
        let disposable = vscode.commands.registerCommand(command.command, () => {
            // The code you place here will be executed every time your command is executed
            executeCommand(vscode.workspace.getConfiguration(command.command));
        });
        context.subscriptions.push(disposable);
    }
}
exports.activate = activate;


function executeCommand(config) {
    let command = config.get('command');
    let args = config.get('args', []);

    _outputChannel.clear();
    // _outputChannel.append("\nargs\n");
    // args.map((arg) => {
    //     _outputChannel.append(arg);
    // });

    let cwd = config.get('cwd');
    if (!command) {
        return;
    }
    macro.create().then((obj) => {
        let replacedArgs = args.map((arg) => {
            return obj.replace(arg);
        });

        var cmd = command ;
        replacedArgs.map((arg) => {
            cmd  = cmd + " " + arg;
        });

        let replacedCwd = obj.replace(cwd) || obj.ProjectDir || obj.ItemDir;

        
        try {
            var _p;
            _p = process.exec(cmd, { cwd: replacedCwd });

            _p.stdout.on("data", (data) => {
                _outputChannel.append(data);
            });

            _p.on("close", (code) => {
                _outputChannel.append("\n\n-------------------------------\n");
                _outputChannel.append("exit: " + code )
            });

            _p.stderr.on("data", (data) => {
                _outputChannel.append(data);
            });

            // var _p;
            // _p =   process.spawn(command, replacedArgs, {
            //         cwd: replacedCwd,
            //          stdio: 'inherit'
            //     });

            // _p.stdout.on("data", (data) => {
            //     _outputChannel.append(data);
            // });

            
        // _outputChannel.append("\ncommand\n");
        _outputChannel.append(cmd);

        // _outputChannel.append(replacedArgs[2]);
        // replacedArgs.map((arg) => {
        //     _outputChannel.append(arg);
        // });
        
        // _outputChannel.append("\nreplacedCwd\n");
        // _outputChannel.append(replacedCwd);

        //      console.log("some process is spawn");

         _outputChannel.append("\n-------------------------------\n");

        }
        catch (err) {
            console.log(err);
            _outputChannel.append(err);
        }
    });
}
// this method is called when your extension is deactivated
function deactivate() {
}
exports.deactivate = deactivate;
//# sourceMappingURL=extension.js.map


test.ss


(define (myadd x y)
    (+ x 2))

(myadd 2 3)
(display "hello")
(print 1)

; (display "hello" (standard-output-port) )

; (pretty-print "hello" (standard-output-port) )
; (flush-output-port) 
(+ 1 1)
